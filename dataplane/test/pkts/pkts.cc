#define PTEMP_ICMP_IPV4 0
#define PTEMP_ICMP6_IPV6 1
#define PTEMP_ARP 2
// 3
#define PTEMP_TCP_IPV4 4
#define PTEMP_BFD_UDP_IPV4 5
#define PTEMP_TCP_IPV6 6
#define PTEMP_BGP_TCP_IPV4 7
#define PTEMP_OSPF_IPV4 8
// 9
#define PTEMP_ICMP_IPV4_VLAN 10
// 11
#define PTEMP_ICMP_IPV4_GTPU_UDP_IPV4 12
// 13
#define PTEMP_ICMP_IPV4_GRE_IPV4 14
// 15
#define PTEMP_IPV6_GRE_IPV4 16
// 17
#define PTEMP_ICMP_IPV4_GRE_IPOPTION_IPV4 18
// 19
#define PTEMP_USER_ICMP_IPV4 20
// 21
// 22
// 23
// 24
// 25
#define PTEMP_6RD_IPV6_IPv4 64

static const uint8_t __payload_s[104] = {
        0x48, 0x54, 0x54, 0x50, 0x2f, 0x31, 0x2e, 0x31, // 8
        0x20, 0x32, 0x30, 0x30, 0x20, 0x4f, 0x4b, 0x0d, // 16
        0x0a, 0x44, 0x61, 0x74, 0x65, 0x3a, 0x20, 0x54, // 24
        0x75, 0x65, 0x2c, 0x20, 0x30, 0x38, 0x20, 0x53, // 32
        0x65, 0x70, 0x20, 0x32, 0x30, 0x31, 0x35, 0x20, // 40
        0x30, 0x38, 0x3a, 0x34, 0x33, 0x3a, 0x35, 0x38, // 48
        0x20, 0x47, 0x4d, 0x54, 0x0d, 0x0a, 0x53, 0x65, // 56
        0x72, 0x76, 0x65, 0x72, 0x3a, 0x20, 0x41, 0x70, // 64
        0x61, 0x63, 0x68, 0x65, 0x2f, 0x32, 0x2e, 0x34, // 72
        0x2e, 0x31, 0x30, 0x20, 0x28, 0x46, 0x65, 0x64, // 80
        0x6f, 0x72, 0x61, 0x29, 0x0d, 0x0a, 0x4c, 0x61, // 88
        0x73, 0x74, 0x2d, 0x4d, 0x6f, 0x64, 0x69, 0x66, // 96
        0x69, 0x65, 0x64, 0x3a, 0x20, 0x53, 0x61, 0x74, // 104

};

static const uint8_t __payload_m[960] = {
        0x48, 0x54, 0x54, 0x50, 0x2f, 0x31, 0x2e, 0x31, // 8
        0x20, 0x32, 0x30, 0x30, 0x20, 0x4f, 0x4b, 0x0d, // 16
        0x0a, 0x44, 0x61, 0x74, 0x65, 0x3a, 0x20, 0x54, // 24
        0x75, 0x65, 0x2c, 0x20, 0x30, 0x38, 0x20, 0x53, // 32
        0x65, 0x70, 0x20, 0x32, 0x30, 0x31, 0x35, 0x20, // 40
        0x30, 0x38, 0x3a, 0x34, 0x33, 0x3a, 0x35, 0x38, // 48
        0x20, 0x47, 0x4d, 0x54, 0x0d, 0x0a, 0x53, 0x65, // 56
        0x72, 0x76, 0x65, 0x72, 0x3a, 0x20, 0x41, 0x70, // 64
        0x61, 0x63, 0x68, 0x65, 0x2f, 0x32, 0x2e, 0x34, // 72
        0x2e, 0x31, 0x30, 0x20, 0x28, 0x46, 0x65, 0x64, // 80
        0x6f, 0x72, 0x61, 0x29, 0x0d, 0x0a, 0x4c, 0x61, // 88
        0x73, 0x74, 0x2d, 0x4d, 0x6f, 0x64, 0x69, 0x66, // 96
        0x69, 0x65, 0x64, 0x3a, 0x20, 0x53, 0x61, 0x74, // 104
        0x2c, 0x20, 0x30, 0x34, 0x20, 0x41, 0x70, 0x72, // 112
        0x20, 0x32, 0x30, 0x31, 0x35, 0x20, 0x31, 0x31, // 120
        0x3a, 0x33, 0x36, 0x3a, 0x35, 0x38, 0x20, 0x47, // 128
        0x4d, 0x54, 0x0d, 0x0a, 0x45, 0x54, 0x61, 0x67, // 136
        0x3a, 0x20, 0x22, 0x39, 0x35, 0x32, 0x2d, 0x35, // 144
        0x31, 0x32, 0x65, 0x34, 0x37, 0x62, 0x39, 0x31, // 152
        0x34, 0x32, 0x35, 0x30, 0x22, 0x0d, 0x0a, 0x41, // 160
        0x63, 0x63, 0x65, 0x70, 0x74, 0x2d, 0x52, 0x61, // 168
        0x6e, 0x67, 0x65, 0x73, 0x3a, 0x20, 0x62, 0x79, // 176
        0x74, 0x65, 0x73, 0x0d, 0x0a, 0x43, 0x6f, 0x6e, // 184
        0x74, 0x65, 0x6e, 0x74, 0x2d, 0x4c, 0x65, 0x6e, // 192
        0x67, 0x74, 0x68, 0x3a, 0x20, 0x32, 0x33, 0x38, // 200
        0x36, 0x0d, 0x0a, 0x4b, 0x65, 0x65, 0x70, 0x2d, // 208
        0x41, 0x6c, 0x69, 0x76, 0x65, 0x3a, 0x20, 0x74, // 216
        0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x3d, 0x35, // 224
        0x2c, 0x20, 0x6d, 0x61, 0x78, 0x3d, 0x31, 0x30, // 232
        0x30, 0x0d, 0x0a, 0x43, 0x6f, 0x6e, 0x6e, 0x65, // 240
        0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x20, 0x4b, // 248
        0x65, 0x65, 0x70, 0x2d, 0x41, 0x6c, 0x69, 0x76, // 256
        0x65, 0x0d, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x65, // 264
        0x6e, 0x74, 0x2d, 0x54, 0x79, 0x70, 0x65, 0x3a, // 272
        0x20, 0x74, 0x65, 0x78, 0x74, 0x2f, 0x68, 0x74, // 280
        0x6d, 0x6c, 0x3b, 0x20, 0x63, 0x68, 0x61, 0x72, // 288
        0x73, 0x65, 0x74, 0x3d, 0x55, 0x54, 0x46, 0x2d, // 296
        0x38, 0x0d, 0x0a, 0x0d, 0x0a, 0x3c, 0x21, 0x44, // 304
        0x4f, 0x43, 0x54, 0x59, 0x50, 0x45, 0x20, 0x68, // 312
        0x74, 0x6d, 0x6c, 0x20, 0x50, 0x55, 0x42, 0x4c, // 320
        0x49, 0x43, 0x20, 0x22, 0x2d, 0x2f, 0x2f, 0x57, // 328
        0x33, 0x43, 0x2f, 0x2f, 0x44, 0x54, 0x44, 0x20, // 336
        0x58, 0x48, 0x54, 0x4d, 0x4c, 0x20, 0x31, 0x2e, // 344
        0x31, 0x2f, 0x2f, 0x45, 0x4e, 0x22, 0x20, 0x22, // 352
        0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x77, // 360
        0x77, 0x77, 0x2e, 0x77, 0x33, 0x2e, 0x6f, 0x72, // 368
        0x67, 0x2f, 0x54, 0x52, 0x2f, 0x78, 0x68, 0x74, // 376
        0x6d, 0x6c, 0x31, 0x31, 0x2f, 0x44, 0x54, 0x44, // 384
        0x2f, 0x78, 0x68, 0x74, 0x6d, 0x6c, 0x31, 0x31, // 392
        0x2e, 0x64, 0x74, 0x64, 0x22, 0x3e, 0x0a, 0x0a, // 400
        0x3c, 0x68, 0x74, 0x6d, 0x6c, 0x20, 0x78, 0x6d, // 408
        0x6c, 0x6e, 0x73, 0x3d, 0x22, 0x68, 0x74, 0x74, // 416
        0x70, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, // 424
        0x77, 0x33, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x31, // 432
        0x39, 0x39, 0x39, 0x2f, 0x78, 0x68, 0x74, 0x6d, // 440
        0x6c, 0x22, 0x20, 0x78, 0x6d, 0x6c, 0x3a, 0x6c, // 448
        0x61, 0x6e, 0x67, 0x3d, 0x22, 0x65, 0x6e, 0x22, // 456
        0x3e, 0x0a, 0x09, 0x3c, 0x68, 0x65, 0x61, 0x64, // 464
        0x3e, 0x0a, 0x09, 0x09, 0x3c, 0x74, 0x69, 0x74, // 472
        0x6c, 0x65, 0x3e, 0x54, 0x65, 0x73, 0x74, 0x20, // 480
        0x50, 0x61, 0x67, 0x65, 0x20, 0x66, 0x6f, 0x72, // 488
        0x20, 0x74, 0x68, 0x65, 0x20, 0x41, 0x70, 0x61, // 496
        0x63, 0x68, 0x65, 0x20, 0x48, 0x54, 0x54, 0x50, // 504
        0x20, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, // 512
        0x6f, 0x6e, 0x20, 0x46, 0x65, 0x64, 0x6f, 0x72, // 520
        0x61, 0x3c, 0x2f, 0x74, 0x69, 0x74, 0x6c, 0x65, // 528
        0x3e, 0x0a, 0x09, 0x09, 0x3c, 0x6d, 0x65, 0x74, // 536
        0x61, 0x20, 0x68, 0x74, 0x74, 0x70, 0x2d, 0x65, // 544
        0x71, 0x75, 0x69, 0x76, 0x3d, 0x22, 0x43, 0x6f, // 552
        0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x54, 0x79, // 560
        0x70, 0x65, 0x22, 0x20, 0x63, 0x6f, 0x6e, 0x74, // 568
        0x65, 0x6e, 0x74, 0x3d, 0x22, 0x74, 0x65, 0x78, // 576
        0x74, 0x2f, 0x68, 0x74, 0x6d, 0x6c, 0x3b, 0x20, // 584
        0x63, 0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 0x3d, // 592
        0x55, 0x54, 0x46, 0x2d, 0x38, 0x22, 0x20, 0x2f, // 600
        0x3e, 0x0a, 0x09, 0x09, 0x3c, 0x73, 0x74, 0x79, // 608
        0x6c, 0x65, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3d, // 616
        0x22, 0x74, 0x65, 0x78, 0x74, 0x2f, 0x63, 0x73, // 624
        0x73, 0x22, 0x3e, 0x0a, 0x09, 0x09, 0x09, 0x2f, // 632
        0x2a, 0x3c, 0x21, 0x5b, 0x43, 0x44, 0x41, 0x54, // 640
        0x41, 0x5b, 0x2a, 0x2f, 0x0a, 0x09, 0x09, 0x09, // 648
        0x62, 0x6f, 0x64, 0x79, 0x20, 0x7b, 0x0a, 0x09, // 656
        0x09, 0x09, 0x09, 0x62, 0x61, 0x63, 0x6b, 0x67, // 664
        0x72, 0x6f, 0x75, 0x6e, 0x64, 0x2d, 0x63, 0x6f, // 672
        0x6c, 0x6f, 0x72, 0x3a, 0x20, 0x23, 0x66, 0x66, // 680
        0x66, 0x3b, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x63, // 688
        0x6f, 0x6c, 0x6f, 0x72, 0x3a, 0x20, 0x23, 0x30, // 696
        0x30, 0x30, 0x3b, 0x0a, 0x09, 0x09, 0x09, 0x09, // 704
        0x66, 0x6f, 0x6e, 0x74, 0x2d, 0x73, 0x69, 0x7a, // 712
        0x65, 0x3a, 0x20, 0x30, 0x2e, 0x39, 0x65, 0x6d, // 720
        0x3b, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x66, 0x6f, // 728
        0x6e, 0x74, 0x2d, 0x66, 0x61, 0x6d, 0x69, 0x6c, // 736
        0x79, 0x3a, 0x20, 0x73, 0x61, 0x6e, 0x73, 0x2d, // 744
        0x73, 0x65, 0x72, 0x69, 0x66, 0x2c, 0x68, 0x65, // 752
        0x6c, 0x76, 0x65, 0x74, 0x69, 0x63, 0x61, 0x3b, // 760
        0x0a, 0x09, 0x09, 0x09, 0x09, 0x6d, 0x61, 0x72, // 768
        0x67, 0x69, 0x6e, 0x3a, 0x20, 0x30, 0x3b, 0x0a, // 776
        0x09, 0x09, 0x09, 0x09, 0x70, 0x61, 0x64, 0x64, // 784
        0x69, 0x6e, 0x67, 0x3a, 0x20, 0x30, 0x3b, 0x0a, // 792
        0x09, 0x09, 0x09, 0x7d, 0x0a, 0x09, 0x09, 0x09, // 800
        0x3a, 0x6c, 0x69, 0x6e, 0x6b, 0x20, 0x7b, 0x0a, // 808
        0x09, 0x09, 0x09, 0x09, 0x63, 0x6f, 0x6c, 0x6f, // 816
        0x72, 0x3a, 0x20, 0x23, 0x63, 0x30, 0x30, 0x3b, // 824
        0x0a, 0x09, 0x09, 0x09, 0x7d, 0x0a, 0x09, 0x09, // 832
        0x09, 0x3a, 0x76, 0x69, 0x73, 0x69, 0x74, 0x65, // 840
        0x64, 0x20, 0x7b, 0x0a, 0x09, 0x09, 0x09, 0x09, // 848
        0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3a, 0x20, 0x23, // 856
        0x63, 0x30, 0x30, 0x3b, 0x0a, 0x09, 0x09, 0x09, // 864
        0x7d, 0x0a, 0x09, 0x09, 0x09, 0x61, 0x3a, 0x68, // 872
        0x6f, 0x76, 0x65, 0x72, 0x20, 0x7b, 0x0a, 0x09, // 880
        0x09, 0x09, 0x09, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // 888
        0x3a, 0x20, 0x23, 0x66, 0x35, 0x30, 0x3b, 0x0a, // 896
        0x09, 0x09, 0x09, 0x7d, 0x0a, 0x09, 0x09, 0x09, // 904
        0x68, 0x31, 0x20, 0x7b, 0x0a, 0x09, 0x09, 0x09, // 912
        0x09, 0x74, 0x65, 0x78, 0x74, 0x2d, 0x61, 0x6c, // 920
        0x69, 0x67, 0x6e, 0x3a, 0x20, 0x63, 0x65, 0x6e, // 928
        0x74, 0x65, 0x72, 0x3b, 0x0a, 0x09, 0x09, 0x09, // 936
        0x09, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x3a, // 944
        0x20, 0x30, 0x3b, 0x0a, 0x09, 0x09, 0x09, 0x09, // 952
        0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x3a, // 960
};

static const uint8_t __payload_l[1400] = {
        0x48, 0x54, 0x54, 0x50, 0x2f, 0x31, 0x2e, 0x31, // 8
        0x20, 0x32, 0x30, 0x30, 0x20, 0x4f, 0x4b, 0x0d, // 16
        0x0a, 0x44, 0x61, 0x74, 0x65, 0x3a, 0x20, 0x54, // 24
        0x75, 0x65, 0x2c, 0x20, 0x30, 0x38, 0x20, 0x53, // 32
        0x65, 0x70, 0x20, 0x32, 0x30, 0x31, 0x35, 0x20, // 40
        0x30, 0x38, 0x3a, 0x34, 0x33, 0x3a, 0x35, 0x38, // 48
        0x20, 0x47, 0x4d, 0x54, 0x0d, 0x0a, 0x53, 0x65, // 56
        0x72, 0x76, 0x65, 0x72, 0x3a, 0x20, 0x41, 0x70, // 64
        0x61, 0x63, 0x68, 0x65, 0x2f, 0x32, 0x2e, 0x34, // 72
        0x2e, 0x31, 0x30, 0x20, 0x28, 0x46, 0x65, 0x64, // 80
        0x6f, 0x72, 0x61, 0x29, 0x0d, 0x0a, 0x4c, 0x61, // 88
        0x73, 0x74, 0x2d, 0x4d, 0x6f, 0x64, 0x69, 0x66, // 96
        0x69, 0x65, 0x64, 0x3a, 0x20, 0x53, 0x61, 0x74, // 104
        0x2c, 0x20, 0x30, 0x34, 0x20, 0x41, 0x70, 0x72, // 112
        0x20, 0x32, 0x30, 0x31, 0x35, 0x20, 0x31, 0x31, // 120
        0x3a, 0x33, 0x36, 0x3a, 0x35, 0x38, 0x20, 0x47, // 128
        0x4d, 0x54, 0x0d, 0x0a, 0x45, 0x54, 0x61, 0x67, // 136
        0x3a, 0x20, 0x22, 0x39, 0x35, 0x32, 0x2d, 0x35, // 144
        0x31, 0x32, 0x65, 0x34, 0x37, 0x62, 0x39, 0x31, // 152
        0x34, 0x32, 0x35, 0x30, 0x22, 0x0d, 0x0a, 0x41, // 160
        0x63, 0x63, 0x65, 0x70, 0x74, 0x2d, 0x52, 0x61, // 168
        0x6e, 0x67, 0x65, 0x73, 0x3a, 0x20, 0x62, 0x79, // 176
        0x74, 0x65, 0x73, 0x0d, 0x0a, 0x43, 0x6f, 0x6e, // 184
        0x74, 0x65, 0x6e, 0x74, 0x2d, 0x4c, 0x65, 0x6e, // 192
        0x67, 0x74, 0x68, 0x3a, 0x20, 0x32, 0x33, 0x38, // 200
        0x36, 0x0d, 0x0a, 0x4b, 0x65, 0x65, 0x70, 0x2d, // 208
        0x41, 0x6c, 0x69, 0x76, 0x65, 0x3a, 0x20, 0x74, // 216
        0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x3d, 0x35, // 224
        0x2c, 0x20, 0x6d, 0x61, 0x78, 0x3d, 0x31, 0x30, // 232
        0x30, 0x0d, 0x0a, 0x43, 0x6f, 0x6e, 0x6e, 0x65, // 240
        0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x20, 0x4b, // 248
        0x65, 0x65, 0x70, 0x2d, 0x41, 0x6c, 0x69, 0x76, // 256
        0x65, 0x0d, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x65, // 264
        0x6e, 0x74, 0x2d, 0x54, 0x79, 0x70, 0x65, 0x3a, // 272
        0x20, 0x74, 0x65, 0x78, 0x74, 0x2f, 0x68, 0x74, // 280
        0x6d, 0x6c, 0x3b, 0x20, 0x63, 0x68, 0x61, 0x72, // 288
        0x73, 0x65, 0x74, 0x3d, 0x55, 0x54, 0x46, 0x2d, // 296
        0x38, 0x0d, 0x0a, 0x0d, 0x0a, 0x3c, 0x21, 0x44, // 304
        0x4f, 0x43, 0x54, 0x59, 0x50, 0x45, 0x20, 0x68, // 312
        0x74, 0x6d, 0x6c, 0x20, 0x50, 0x55, 0x42, 0x4c, // 320
        0x49, 0x43, 0x20, 0x22, 0x2d, 0x2f, 0x2f, 0x57, // 328
        0x33, 0x43, 0x2f, 0x2f, 0x44, 0x54, 0x44, 0x20, // 336
        0x58, 0x48, 0x54, 0x4d, 0x4c, 0x20, 0x31, 0x2e, // 344
        0x31, 0x2f, 0x2f, 0x45, 0x4e, 0x22, 0x20, 0x22, // 352
        0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x77, // 360
        0x77, 0x77, 0x2e, 0x77, 0x33, 0x2e, 0x6f, 0x72, // 368
        0x67, 0x2f, 0x54, 0x52, 0x2f, 0x78, 0x68, 0x74, // 376
        0x6d, 0x6c, 0x31, 0x31, 0x2f, 0x44, 0x54, 0x44, // 384
        0x2f, 0x78, 0x68, 0x74, 0x6d, 0x6c, 0x31, 0x31, // 392
        0x2e, 0x64, 0x74, 0x64, 0x22, 0x3e, 0x0a, 0x0a, // 400
        0x3c, 0x68, 0x74, 0x6d, 0x6c, 0x20, 0x78, 0x6d, // 408
        0x6c, 0x6e, 0x73, 0x3d, 0x22, 0x68, 0x74, 0x74, // 416
        0x70, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, // 424
        0x77, 0x33, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x31, // 432
        0x39, 0x39, 0x39, 0x2f, 0x78, 0x68, 0x74, 0x6d, // 440
        0x6c, 0x22, 0x20, 0x78, 0x6d, 0x6c, 0x3a, 0x6c, // 448
        0x61, 0x6e, 0x67, 0x3d, 0x22, 0x65, 0x6e, 0x22, // 456
        0x3e, 0x0a, 0x09, 0x3c, 0x68, 0x65, 0x61, 0x64, // 464
        0x3e, 0x0a, 0x09, 0x09, 0x3c, 0x74, 0x69, 0x74, // 472
        0x6c, 0x65, 0x3e, 0x54, 0x65, 0x73, 0x74, 0x20, // 480
        0x50, 0x61, 0x67, 0x65, 0x20, 0x66, 0x6f, 0x72, // 488
        0x20, 0x74, 0x68, 0x65, 0x20, 0x41, 0x70, 0x61, // 496
        0x63, 0x68, 0x65, 0x20, 0x48, 0x54, 0x54, 0x50, // 504
        0x20, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, // 512
        0x6f, 0x6e, 0x20, 0x46, 0x65, 0x64, 0x6f, 0x72, // 520
        0x61, 0x3c, 0x2f, 0x74, 0x69, 0x74, 0x6c, 0x65, // 528
        0x3e, 0x0a, 0x09, 0x09, 0x3c, 0x6d, 0x65, 0x74, // 536
        0x61, 0x20, 0x68, 0x74, 0x74, 0x70, 0x2d, 0x65, // 544
        0x71, 0x75, 0x69, 0x76, 0x3d, 0x22, 0x43, 0x6f, // 552
        0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x54, 0x79, // 560
        0x70, 0x65, 0x22, 0x20, 0x63, 0x6f, 0x6e, 0x74, // 568
        0x65, 0x6e, 0x74, 0x3d, 0x22, 0x74, 0x65, 0x78, // 576
        0x74, 0x2f, 0x68, 0x74, 0x6d, 0x6c, 0x3b, 0x20, // 584
        0x63, 0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 0x3d, // 592
        0x55, 0x54, 0x46, 0x2d, 0x38, 0x22, 0x20, 0x2f, // 600
        0x3e, 0x0a, 0x09, 0x09, 0x3c, 0x73, 0x74, 0x79, // 608
        0x6c, 0x65, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3d, // 616
        0x22, 0x74, 0x65, 0x78, 0x74, 0x2f, 0x63, 0x73, // 624
        0x73, 0x22, 0x3e, 0x0a, 0x09, 0x09, 0x09, 0x2f, // 632
        0x2a, 0x3c, 0x21, 0x5b, 0x43, 0x44, 0x41, 0x54, // 640
        0x41, 0x5b, 0x2a, 0x2f, 0x0a, 0x09, 0x09, 0x09, // 648
        0x62, 0x6f, 0x64, 0x79, 0x20, 0x7b, 0x0a, 0x09, // 656
        0x09, 0x09, 0x09, 0x62, 0x61, 0x63, 0x6b, 0x67, // 664
        0x72, 0x6f, 0x75, 0x6e, 0x64, 0x2d, 0x63, 0x6f, // 672
        0x6c, 0x6f, 0x72, 0x3a, 0x20, 0x23, 0x66, 0x66, // 680
        0x66, 0x3b, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x63, // 688
        0x6f, 0x6c, 0x6f, 0x72, 0x3a, 0x20, 0x23, 0x30, // 696
        0x30, 0x30, 0x3b, 0x0a, 0x09, 0x09, 0x09, 0x09, // 704
        0x66, 0x6f, 0x6e, 0x74, 0x2d, 0x73, 0x69, 0x7a, // 712
        0x65, 0x3a, 0x20, 0x30, 0x2e, 0x39, 0x65, 0x6d, // 720
        0x3b, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x66, 0x6f, // 728
        0x6e, 0x74, 0x2d, 0x66, 0x61, 0x6d, 0x69, 0x6c, // 736
        0x79, 0x3a, 0x20, 0x73, 0x61, 0x6e, 0x73, 0x2d, // 744
        0x73, 0x65, 0x72, 0x69, 0x66, 0x2c, 0x68, 0x65, // 752
        0x6c, 0x76, 0x65, 0x74, 0x69, 0x63, 0x61, 0x3b, // 760
        0x0a, 0x09, 0x09, 0x09, 0x09, 0x6d, 0x61, 0x72, // 768
        0x67, 0x69, 0x6e, 0x3a, 0x20, 0x30, 0x3b, 0x0a, // 776
        0x09, 0x09, 0x09, 0x09, 0x70, 0x61, 0x64, 0x64, // 784
        0x69, 0x6e, 0x67, 0x3a, 0x20, 0x30, 0x3b, 0x0a, // 792
        0x09, 0x09, 0x09, 0x7d, 0x0a, 0x09, 0x09, 0x09, // 800
        0x3a, 0x6c, 0x69, 0x6e, 0x6b, 0x20, 0x7b, 0x0a, // 808
        0x09, 0x09, 0x09, 0x09, 0x63, 0x6f, 0x6c, 0x6f, // 816
        0x72, 0x3a, 0x20, 0x23, 0x63, 0x30, 0x30, 0x3b, // 824
        0x0a, 0x09, 0x09, 0x09, 0x7d, 0x0a, 0x09, 0x09, // 832
        0x09, 0x3a, 0x76, 0x69, 0x73, 0x69, 0x74, 0x65, // 840
        0x64, 0x20, 0x7b, 0x0a, 0x09, 0x09, 0x09, 0x09, // 848
        0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3a, 0x20, 0x23, // 856
        0x63, 0x30, 0x30, 0x3b, 0x0a, 0x09, 0x09, 0x09, // 864
        0x7d, 0x0a, 0x09, 0x09, 0x09, 0x61, 0x3a, 0x68, // 872
        0x6f, 0x76, 0x65, 0x72, 0x20, 0x7b, 0x0a, 0x09, // 880
        0x09, 0x09, 0x09, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // 888
        0x3a, 0x20, 0x23, 0x66, 0x35, 0x30, 0x3b, 0x0a, // 896
        0x09, 0x09, 0x09, 0x7d, 0x0a, 0x09, 0x09, 0x09, // 904
        0x68, 0x31, 0x20, 0x7b, 0x0a, 0x09, 0x09, 0x09, // 912
        0x09, 0x74, 0x65, 0x78, 0x74, 0x2d, 0x61, 0x6c, // 920
        0x69, 0x67, 0x6e, 0x3a, 0x20, 0x63, 0x65, 0x6e, // 928
        0x74, 0x65, 0x72, 0x3b, 0x0a, 0x09, 0x09, 0x09, // 936
        0x09, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x3a, // 944
        0x20, 0x30, 0x3b, 0x0a, 0x09, 0x09, 0x09, 0x09, // 952
        0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x3a, // 960
        0x20, 0x30, 0x2e, 0x36, 0x65, 0x6d, 0x20, 0x32, // 968
        0x65, 0x6d, 0x20, 0x30, 0x2e, 0x34, 0x65, 0x6d, // 976
        0x3b, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x62, 0x61, // 984
        0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, // 992
        0x2d, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3a, 0x20, // 1000
        0x23, 0x32, 0x32, 0x34, 0x33, 0x37, 0x66, 0x3b, // 1008
        0x0a, 0x09, 0x09, 0x09, 0x09, 0x63, 0x6f, 0x6c, // 1016
        0x6f, 0x72, 0x3a, 0x20, 0x23, 0x66, 0x66, 0x66, // 1024
        0x3b, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x66, 0x6f, // 1032
        0x6e, 0x74, 0x2d, 0x77, 0x65, 0x69, 0x67, 0x68, // 1040
        0x74, 0x3a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, // 1048
        0x6c, 0x3b, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x66, // 1056
        0x6f, 0x6e, 0x74, 0x2d, 0x73, 0x69, 0x7a, 0x65, // 1064
        0x3a, 0x20, 0x31, 0x2e, 0x37, 0x35, 0x65, 0x6d, // 1072
        0x3b, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x62, 0x6f, // 1080
        0x72, 0x64, 0x65, 0x72, 0x2d, 0x62, 0x6f, 0x74, // 1088
        0x74, 0x6f, 0x6d, 0x3a, 0x20, 0x32, 0x70, 0x78, // 1096
        0x20, 0x73, 0x6f, 0x6c, 0x69, 0x64, 0x20, 0x23, // 1104
        0x30, 0x30, 0x30, 0x3b, 0x0a, 0x09, 0x09, 0x09, // 1112
        0x7d, 0x0a, 0x09, 0x09, 0x09, 0x68, 0x31, 0x20, // 1120
        0x73, 0x74, 0x72, 0x6f, 0x6e, 0x67, 0x20, 0x7b, // 1128
        0x0a, 0x09, 0x09, 0x09, 0x09, 0x66, 0x6f, 0x6e, // 1136
        0x74, 0x2d, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, // 1144
        0x3a, 0x20, 0x62, 0x6f, 0x6c, 0x64, 0x3b, 0x0a, // 1152
        0x09, 0x09, 0x09, 0x7d, 0x0a, 0x09, 0x09, 0x09, // 1160
        0x68, 0x32, 0x20, 0x7b, 0x0a, 0x09, 0x09, 0x09, // 1168
        0x09, 0x66, 0x6f, 0x6e, 0x74, 0x2d, 0x73, 0x69, // 1176
        0x7a, 0x65, 0x3a, 0x20, 0x31, 0x2e, 0x31, 0x65, // 1184
        0x6d, 0x3b, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x66, // 1192
        0x6f, 0x6e, 0x74, 0x2d, 0x77, 0x65, 0x69, 0x67, // 1200
        0x68, 0x74, 0x3a, 0x20, 0x62, 0x6f, 0x6c, 0x64, // 1208
        0x3b, 0x0a, 0x09, 0x09, 0x09, 0x7d, 0x0a, 0x09, // 1216
        0x09, 0x09, 0x68, 0x72, 0x20, 0x7b, 0x0a, 0x09, // 1224
        0x09, 0x09, 0x09, 0x64, 0x69, 0x73, 0x70, 0x6c, // 1232
        0x61, 0x79, 0x3a, 0x20, 0x6e, 0x6f, 0x6e, 0x65, // 1240
        0x3b, 0x0a, 0x09, 0x09, 0x09, 0x7d, 0x0a, 0x09, // 1248
        0x09, 0x09, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, // 1256
        0x6e, 0x74, 0x20, 0x7b, 0x0a, 0x09, 0x09, 0x09, // 1264
        0x09, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, // 1272
        0x3a, 0x20, 0x31, 0x65, 0x6d, 0x20, 0x35, 0x65, // 1280
        0x6d, 0x3b, 0x0a, 0x09, 0x09, 0x09, 0x7d, 0x0a, // 1288
        0x09, 0x09, 0x09, 0x2e, 0x63, 0x6f, 0x6e, 0x74, // 1296
        0x65, 0x6e, 0x74, 0x2d, 0x63, 0x6f, 0x6c, 0x75, // 1304
        0x6d, 0x6e, 0x73, 0x20, 0x7b, 0x0a, 0x09, 0x09, // 1312
        0x09, 0x09, 0x2f, 0x2a, 0x20, 0x53, 0x65, 0x74, // 1320
        0x74, 0x69, 0x6e, 0x67, 0x20, 0x72, 0x65, 0x6c, // 1328
        0x61, 0x74, 0x69, 0x76, 0x65, 0x20, 0x70, 0x6f, // 1336
        0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, // 1344
        0x67, 0x20, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x73, // 1352
        0x20, 0x66, 0x6f, 0x72, 0x20, 0x0a, 0x09, 0x09, // 1360
        0x09, 0x09, 0x61, 0x62, 0x73, 0x6f, 0x6c, 0x75, // 1368
        0x74, 0x65, 0x20, 0x70, 0x6f, 0x73, 0x69, 0x74, // 1376
        0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x66, // 1384
        0x6f, 0x72, 0x20, 0x73, 0x75, 0x62, 0x2d, 0x63, // 1392
        0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x20, 0x2a, // 1400

};

static const unsigned char __arp_packet[60] = {
         0xff, 0xff, 0xff, 0xff,   0xff, 0xff, 0xf4, 0x5c,
         0x89, 0xbc, 0x7f, 0x4f,   0x08, 0x06, 0x00, 0x01,
         0x08, 0x00, 0x06, 0x04,   0x00, 0x01, 0xf4, 0x5c,
         0x89, 0xbc, 0x7f, 0x4f,   0x0a, 0xc0, 0xd2, 0x47,
         0x00, 0x00, 0x00, 0x00,   0x00, 0x00, 0x0a, 0xc0,
         0xd2, 0x47, 0x00, 0x00,   0x00, 0x00, 0x00, 0x00,
         0x00, 0x00, 0x00, 0x00,   0x00, 0x00, 0x00, 0x00,
         0x00, 0x00, 0x00, 0x00,
};

static const uint8_t __bfd_udp_ipv4_packet[155] = {
        0x00, 0x25, 0x64, 0x3b, 0xeb, 0x95, 0x00, 0xd0, // 8
        0x03, 0xeb, 0x30, 0x00, 0x08, 0x00, 0x45, 0x00, // 16
        0x00, 0x8d, 0x00, 0x00, 0x40, 0x00, 0xff, 0x11, // 24
        0x7a, 0x60, 0xcc, 0x3f, 0xd6, 0x3f, 0x52, 0x5e, // 32
        0xd5, 0x22, 0x69, 0x8e, 0x0e, 0xc8, 0x00, 0x79, // 40
        0x49, 0x2d, 0xff, 0xff, 0xff, 0xff, 0x49, 0x11, // 48
        0x56, 0x61, 0x6c, 0x76, 0x65, 0x20, 0x44, 0x6f, // 56
        0x74, 0x61, 0x20, 0x32, 0x20, 0x53, 0x65, 0x72, // 64
        0x76, 0x65, 0x72, 0x20, 0x23, 0x38, 0x20, 0x28, // 72
        0x73, 0x72, 0x63, 0x64, 0x73, 0x30, 0x31, 0x33, // 80
        0x2e, 0x69, 0x61, 0x64, 0x2d, 0x31, 0x2e, 0x76, // 88
        0x61, 0x6c, 0x76, 0x65, 0x2e, 0x6e, 0x65, 0x74, // 96
        0x29, 0x00, 0x64, 0x6f, 0x74, 0x61, 0x00, 0x64, // 104
        0x6f, 0x74, 0x61, 0x00, 0x44, 0x6f, 0x74, 0x61, // 112
        0x20, 0x32, 0x00, 0x3a, 0x02, 0x0a, 0x17, 0x09, // 120
        0x64, 0x6c, 0x00, 0x01, 0x34, 0x30, 0x00, 0xf1, // 128
        0x8e, 0x69, 0x03, 0x54, 0xc1, 0x13, 0x54, 0x0b, // 136
        0x40, 0x01, 0x7b, 0x6d, 0x00, 0x65, 0x6d, 0x70, // 144
        0x74, 0x79, 0x00, 0x3a, 0x02, 0x00, 0x00, 0x00, // 152
        0x00, 0x00, 0x00,
};

static const uint8_t __bgp_tcp_ipv4_packet[111] = {
         0xfa, 0x16, 0x3e, 0x17, 0x10, 0x52, 0xfa, 0x16, // 8 
         0x3e, 0x34, 0x1b, 0x14, 0x08, 0x00, 0x45, 0xc0, // 16 
         0x00, 0x61, 0x6c, 0xea, 0x40, 0x00, 0x01, 0x06, // 24 
         0x72, 0x99, 0xc0, 0xa8, 0x0c, 0x01, 0xc0, 0xa8, // 32 
         0x0c, 0x02, 0x90, 0x9b, 0x00, 0xb3, 0xdd, 0x3a, // 40 
         0x49, 0x0c, 0x02, 0x58, 0x2b, 0x23, 0x50, 0x18, // 48 
         0x40, 0x00, 0xb3, 0x26, 0x00, 0x00, 0xff, 0xff, // 56 
         0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // 64 
         0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x39, // 72 
         0x01, 0x04, 0x00, 0x01, 0x00, 0xb4, 0x01, 0x01, // 80 
         0x01, 0x01, 0x1c, 0x02, 0x06, 0x01, 0x04, 0x00, // 88 
         0x01, 0x00, 0x01, 0x02, 0x02, 0x80, 0x00, 0x02, // 96 
         0x02, 0x02, 0x00, 0x02, 0x02, 0x46, 0x00, 0x02, // 104 
         0x06, 0x41, 0x04, 0x00, 0x00, 0x00, 0x01, 
};

static const uint8_t __icmp_ipv4_packet[] = {
0x00, 0x50, 0x56, 0xe0, 0x14, 0x49, 0x00, 0x0c, 
0x29, 0x34, 0x0b, 0xde, 0x08, 0x00, 0x45, 0x00, 
0x00, 0x3c, 0xd7, 0x43, 0x00, 0x00, 0x80, 0x01, 
0x2b, 0x73, 0xc0, 0xa8, 0x9e, 0x8b, 0xae, 0x89, 
0x2a, 0x4d, 0x08, 0x00, 0x2a, 0x5c, 0x02, 0x00, 
0x21, 0x00, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 
0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 
0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 
0x77, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 
0x68, 0x69, 
};

static const uint8_t __user_icmp_ipv4_packet[] = {
0x00, 0x50, 0x56, 0xe0, 0x14, 0x49, 0x00, 0x0c,
0x29, 0x34, 0x0b, 0xde, 0x08, 0x00, 0x45, 0x00,
0x00, 0x3c, 0xd7, 0x43, 0x00, 0x00, 0x80, 0x01,
0x2b, 0x73, 0x0a, 0xa8, 0x9e, 0x8b, 0x0a, 0x89,
0x2a, 0x4d, 0x08, 0x00, 0x2a, 0x5c, 0x02, 0x00,
0x21, 0x00, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66,
0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e,
0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76,
0x77, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,
0x68, 0x69,
};

static const uint8_t __icmp6_ipv6_packet[] = {
0x33, 0x33, 0x00, 0x00, 0x00, 0x01, 0x58, 0x6d, 
0x8f, 0x56, 0x30, 0x09, 0x86, 0xdd, 0x60, 0x00, 
0x00, 0x00, 0x00, 0x38, 0x3a, 0xff, 0xfe, 0x80, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5a, 0x6d, 
0x8f, 0xff, 0xfe, 0x56, 0x30, 0x09, 0xff, 0x02, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x86, 0x00, 
0xab, 0x32, 0x40, 0x58, 0x07, 0x08, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x04, 
0x40, 0xc0, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 
0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x20, 0x02, 
0x18, 0x3d, 0xdb, 0xa4, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 
0x58, 0x6d, 0x8f, 0x56, 0x30, 0x09, 
};
static const uint8_t __ospf_ipv4_packet[90] = {
        0x01, 0x00, 0x5e, 0x00, 0x00, 0x05, 0xc0, 0x01, // 8
        0x0f, 0x78, 0x00, 0x00, 0x08, 0x00, 0x45, 0xc0, // 16
        0x00, 0x4c, 0x03, 0xf8, 0x00, 0x00, 0x01, 0x59, // 24
        0xca, 0x9a, 0x0a, 0x00, 0x00, 0x02, 0xe0, 0x00, // 32
        0x00, 0x05, 0x02, 0x01, 0x00, 0x2c, 0xc0, 0xa8, // 40
        0x67, 0x01, 0x00, 0x00, 0x00, 0x01, 0xb9, 0xf8, // 48
        0x00, 0x01, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x00, // 56
        0x00, 0x00, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x0a, // 64
        0x12, 0x01, 0x00, 0x00, 0x00, 0x28, 0x0a, 0x00, // 72
        0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0xff, 0xf6, // 80
        0x00, 0x03, 0x00, 0x01, 0x00, 0x04, 0x00, 0x00, // 88
        0x00, 0x01,
};

static const uint8_t __icmp_ipv4_vlan_packet[50] = {
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x17, // 8 
        0x5a, 0xed, 0x7a, 0xf0, 0x81, 0x00, 0x00, 0x01, // 16 
        0x81, 0x00, 0x00, 0x14, 0x08, 0x00, 0x45, 0x00, // 24 
        0x00, 0x1c, 0x00, 0x01, 0x00, 0x00, 0x40, 0x01, // 32 
        0xb9, 0x37, 0xc0, 0xa8, 0x01, 0x01, 0xff, 0xff, // 40 
        0xff, 0xff, 0x08, 0x00, 0xf7, 0xff, 0x00, 0x00, // 48 
        0x00, 0x00, 
};

static const uint8_t __tcp_ipv4_packet[96] = {
        0x10, 0xfe, 0xed, 0xe5, 0xa2, 0x58, 0x70, 0x56, // 8 
        0x81, 0xbf, 0x7c, 0x37, 0x08, 0x00, 0x45, 0x00, // 16 
        0x00, 0xc1, 0x02, 0xa4, 0x40, 0x00, 0x40, 0x06, // 24 
        0x30, 0x64, 0xc0, 0xa8, 0x58, 0xbd, 0x0a, 0x1f, // 32
        0x3d, 0xaa, 0xeb, 0xdd, 0x00, 0x50, 0x95, 0x07, // 40 
        0x10, 0xd4, 0xec, 0x6f, 0xca, 0xbb, 0x80, 0x18, // 48 
        0x10, 0x15, 0x66, 0x5e, 0x00, 0x00, 0x01, 0x01, // 56 
        0x08, 0x0a, 0x34, 0x6d, 0xdf, 0x75, 0xab, 0xa5, // 64 
        0x8d, 0x02, 0x47, 0x45, 0x54, 0x20, 0x2f, 0x20, // 72 
        0x48, 0x54, 0x54, 0x50, 0x2f, 0x31, 0x2e, 0x31, // 80 
        0x0d, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x2d, 0x41, // 88 
        0x67, 0x65, 0x6e, 0x74, 0x3a, 0x20, 0x57, 0x67, // 96 
};

static const uint8_t __tcp_ipv6_packet[267] = {
        0x68, 0xa3, 0xc4, 0xf9, 0x49, 0xf6, 0x54, 0x75, // 8 
        0xd0, 0xc9, 0x0b, 0x81, 0x86, 0xdd, 0x60, 0x00, // 16 
        0x00, 0x00, 0x00, 0xd5, 0x06, 0x38, 0x26, 0x07, // 24
        0xf8, 0xb0, 0x40, 0x0c, 0x0c, 0x03, 0x00, 0x00, // 32
        0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x20, 0x01, // 40
        0x04, 0x70, 0x04, 0x1f, 0x3d, 0xab, 0x49, 0x57, // 48
        0x21, 0x74, 0xe8, 0x2c, 0x48, 0x87, 0x00, 0x19, // 56
        0xf9, 0xc7, 0x95, 0x63, 0x97, 0xd0, 0x03, 0xa0, // 64 
        0x88, 0x37, 0x50, 0x18, 0x01, 0x50, 0x53, 0xbc, // 72 
        0x00, 0x00, 0x32, 0x35, 0x30, 0x2d, 0x6d, 0x78, // 80 
        0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, // 88 
        0x63, 0x6f, 0x6d, 0x20, 0x61, 0x74, 0x20, 0x79, // 96 
        0x6f, 0x75, 0x72, 0x20, 0x73, 0x65, 0x72, 0x76, // 104 
        0x69, 0x63, 0x65, 0x2c, 0x20, 0x5b, 0x32, 0x30, // 112 
        0x30, 0x31, 0x3a, 0x34, 0x37, 0x30, 0x3a, 0x65, // 120 
        0x35, 0x62, 0x66, 0x3a, 0x64, 0x65, 0x61, 0x64, // 128 
        0x3a, 0x34, 0x39, 0x35, 0x37, 0x3a, 0x32, 0x31, // 136 
        0x37, 0x34, 0x3a, 0x65, 0x38, 0x32, 0x63, 0x3a, // 144 
        0x34, 0x38, 0x38, 0x37, 0x5d, 0x0d, 0x0a, 0x32, // 152 
        0x35, 0x30, 0x2d, 0x53, 0x49, 0x5a, 0x45, 0x20, // 160 
        0x33, 0x35, 0x38, 0x38, 0x32, 0x35, 0x37, 0x37, // 168 
        0x0d, 0x0a, 0x32, 0x35, 0x30, 0x2d, 0x38, 0x42, // 176 
        0x49, 0x54, 0x4d, 0x49, 0x4d, 0x45, 0x0d, 0x0a, // 184 
        0x32, 0x35, 0x30, 0x2d, 0x53, 0x54, 0x41, 0x52, // 192 
        0x54, 0x54, 0x4c, 0x53, 0x0d, 0x0a, 0x32, 0x35, // 200 
        0x30, 0x2d, 0x45, 0x4e, 0x48, 0x41, 0x4e, 0x43, // 208 
        0x45, 0x44, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, // 216 
        0x43, 0x4f, 0x44, 0x45, 0x53, 0x0d, 0x0a, 0x32, // 224 
        0x35, 0x30, 0x2d, 0x50, 0x49, 0x50, 0x45, 0x4c, // 232 
        0x49, 0x4e, 0x49, 0x4e, 0x47, 0x0d, 0x0a, 0x32, // 240 
        0x35, 0x30, 0x2d, 0x43, 0x48, 0x55, 0x4e, 0x4b, // 248 
        0x49, 0x4e, 0x47, 0x0d, 0x0a, 0x32, 0x35, 0x30, // 256 
        0x20, 0x53, 0x4d, 0x54, 0x50, 0x55, 0x54, 0x46, // 264 
        0x38, 0x0d, 0x0a, 
};

static const uint8_t __icmp_ipv4_gtpu_udp_ipv4_packet[138] = {
        0x00, 0x0c, 0x29, 0xda, 0xd1, 0xde, 0x00, 0x0c, // 8
        0x29, 0xe3, 0xc6, 0x4d, 0x08, 0x00, 0x45, 0x00, // 16
        0x00, 0x7c, 0x00, 0x00, 0x40, 0x00, 0x40, 0x11, // 24
        0x67, 0xbb, 0xc0, 0xa8, 0x28, 0xb3, 0xc0, 0xa8, // 32
        0x28, 0xb2, 0x08, 0x68, 0x08, 0x68, 0x00, 0x68, // 40
        0xbf, 0x64, 0x32, 0xff, 0x00, 0x58, 0xaf, 0xbe, // 48
        0xad, 0xde, 0x28, 0xdb, 0x00, 0x00, 0x45, 0x00, // 56
        0x00, 0x54, 0x00, 0x00, 0x40, 0x00, 0x40, 0x01, // 64
        0x5e, 0xa5, 0x99, 0x88, 0x77, 0x66, 0xc0, 0xa8, // 72
        0x28, 0xb2, 0x08, 0x00, 0xbe, 0xe7, 0x00, 0x00, // 80
        0x28, 0x7b, 0x04, 0x11, 0x20, 0x4b, 0xf4, 0x3d, // 88
        0x0d, 0x00, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, // 96
        0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, // 104
        0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, // 112
        0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, // 120
        0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, // 128
        0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, // 136
        0x36, 0x37,
};

static const uint8_t __icmp_ipv4_gre_ipv4_packet[138] = {
        0xc2, 0x01, 0x57, 0x75, 0x00, 0x00, 0xc2, 0x00, // 8
        0x57, 0x75, 0x00, 0x00, 0x08, 0x00, 0x45, 0x00, // 16
        0x00, 0x7c, 0x00, 0x0a, 0x00, 0x00, 0xff, 0x2f, // 24
        0xa7, 0x46, 0x0a, 0x00, 0x00, 0x01, 0x0a, 0x00, // 32
        0x00, 0x02, 0x00, 0x00, 0x08, 0x00, 0x45, 0x00, // 40
        0x00, 0x64, 0x00, 0x0a, 0x00, 0x00, 0xff, 0x01, // 48
        0xb5, 0x89, 0x01, 0x01, 0x01, 0x01, 0x02, 0x02, // 56
        0x02, 0x02, 0x08, 0x00, 0xbf, 0xd4, 0x00, 0x02, // 64
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, // 72
        0xbe, 0x70, 0xab, 0xcd, 0xab, 0xcd, 0xab, 0xcd, // 80
        0xab, 0xcd, 0xab, 0xcd, 0xab, 0xcd, 0xab, 0xcd, // 88
        0xab, 0xcd, 0xab, 0xcd, 0xab, 0xcd, 0xab, 0xcd, // 96
        0xab, 0xcd, 0xab, 0xcd, 0xab, 0xcd, 0xab, 0xcd, // 104
        0xab, 0xcd, 0xab, 0xcd, 0xab, 0xcd, 0xab, 0xcd, // 112
        0xab, 0xcd, 0xab, 0xcd, 0xab, 0xcd, 0xab, 0xcd, // 120
        0xab, 0xcd, 0xab, 0xcd, 0xab, 0xcd, 0xab, 0xcd, // 128
        0xab, 0xcd, 0xab, 0xcd, 0xab, 0xcd, 0xab, 0xcd, // 136
        0xab, 0xcd,
};

static const uint8_t __icmp_ipv4_gre_ipoption_ipv4_packet[150] = {
        0xc2, 0x01, 0x57, 0x75, 0x00, 0x00, 0xc2, 0x00, // 8
        0x57, 0x75, 0x00, 0x00, 0x08, 0x00, 0x45, 0x00, // 16
        0x00, 0x7c, 0x00, 0x0a, 0x00, 0x00, 0xff, 0x2f, // 24
        0xa7, 0x46, 0x0a, 0x00, 0x00, 0x01, 0x0a, 0x00, // 32
        0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x45, 0x00, // 40
        0x00, 0x64, 0x00, 0x0a, 0x00, 0x00, 0xff, 0x01, // 48
        0xb5, 0x89, 0x00, 0x88, 0x77, 0x66, 0x00, 0x88, // 56
        0x77, 0x66, 0x08, 0x00, 0xbf, 0xd4, 0x00, 0x02, // 64
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, // 72
        0xbe, 0x70, 0xab, 0xcd, 0xab, 0xcd, 0xab, 0xcd, // 80
        0xab, 0xcd, 0xab, 0xcd, 0xab, 0xcd, 0xab, 0xcd, // 88
        0xab, 0xcd, 0xab, 0xcd, 0xab, 0xcd, 0xab, 0xcd, // 96
        0xab, 0xcd, 0xab, 0xcd, 0xab, 0xcd, 0xab, 0xcd, // 104
        0xab, 0xcd, 0xab, 0xcd, 0xab, 0xcd, 0xab, 0xcd, // 112
        0xab, 0xcd, 0xab, 0xcd, 0xab, 0xcd, 0xab, 0xcd, // 120
        0xab, 0xcd, 0xab, 0xcd, 0xab, 0xcd, 0xab, 0xcd, // 128
        0xab, 0xcd, 0xab, 0xcd, 0xab, 0xcd, 0xab, 0xcd, // 136
        0xab, 0xcd,
};

static const uint8_t __6rd_ipv6_ipv4_packet[] ={
        0xc2, 0x01, 0x57, 0x75, 0x00, 0x00, 0xc2, 0x00, // 8
        0x57, 0x75, 0x00, 0x00, 0x08, 0x00,

        0x45, 0x00, 0x00, 0x78, 0x00, 0x14, 0x00, 0x00,
        0xff, 0x41, 0xa7, 0x6b, 0x0a, 0x00, 0x00, 0x01,
        0x0a, 0x00, 0x00, 0x02,

        0x60, 0x00, // 16
        0x00, 0x00, 0x00, 0xd5, 0x06, 0x38, 0x26, 0x07, // 24
        0xf8, 0xb0, 0x40, 0x0c, 0x0c, 0x03, 0x00, 0x00, // 32
        0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x20, 0x01, // 40
        0x04, 0x70, 0x04, 0x1f, 0x3d, 0xab, 0x49, 0x57, // 48
        0x21, 0x74, 0xe8, 0x2c, 0x48, 0x87, 0x00, 0x19, // 56
        0xf9, 0xc7, 0x95, 0x63, 0x97, 0xd0, 0x03, 0xa0, // 64
        0x88, 0x37, 0x50, 0x18, 0x01, 0x50, 0x53, 0xbc, // 72
        0x00, 0x00, 0x32, 0x35, 0x30, 0x2d, 0x6d, 0x78, // 80
        0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, // 88
        0x63, 0x6f, 0x6d, 0x20, 0x61, 0x74, 0x20, 0x79, // 96
        0x6f, 0x75, 0x72, 0x20, 0x73, 0x65, 0x72, 0x76, // 104
        0x69, 0x63, 0x65, 0x2c, 0x20, 0x5b, 0x32, 0x30, // 112
        0x30, 0x31, 0x3a, 0x34, 0x37, 0x30, 0x3a, 0x65, // 120
        0x35, 0x62, 0x66, 0x3a, 0x64, 0x65, 0x61, 0x64, // 128
        0x3a, 0x34, 0x39, 0x35, 0x37, 0x3a, 0x32, 0x31, // 136
        0x37, 0x34, 0x3a, 0x65, 0x38, 0x32, 0x63, 0x3a, // 144
        0x34, 0x38, 0x38, 0x37, 0x5d, 0x0d, 0x0a, 0x32, // 152
        0x35, 0x30, 0x2d, 0x53, 0x49, 0x5a, 0x45, 0x20, // 160
        0x33, 0x35, 0x38, 0x38, 0x32, 0x35, 0x37, 0x37, // 168
        0x0d, 0x0a, 0x32, 0x35, 0x30, 0x2d, 0x38, 0x42, // 176
        0x49, 0x54, 0x4d, 0x49, 0x4d, 0x45, 0x0d, 0x0a, // 184
        0x32, 0x35, 0x30, 0x2d, 0x53, 0x54, 0x41, 0x52, // 192
        0x54, 0x54, 0x4c, 0x53, 0x0d, 0x0a, 0x32, 0x35, // 200
        0x30, 0x2d, 0x45, 0x4e, 0x48, 0x41, 0x4e, 0x43, // 208
        0x45, 0x44, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, // 216
        0x43, 0x4f, 0x44, 0x45, 0x53, 0x0d, 0x0a, 0x32, // 224
        0x35, 0x30, 0x2d, 0x50, 0x49, 0x50, 0x45, 0x4c, // 232
        0x49, 0x4e, 0x49, 0x4e, 0x47, 0x0d, 0x0a, 0x32, // 240
        0x35, 0x30, 0x2d, 0x43, 0x48, 0x55, 0x4e, 0x4b, // 248
        0x49, 0x4e, 0x47, 0x0d, 0x0a, 0x32, 0x35, 0x30, // 256
        0x20, 0x53, 0x4d, 0x54, 0x50, 0x55, 0x54, 0x46, // 264
        0x38, 0x0d, 0x0a,
};

/*
static inline void set_ether(struct rte_mbuf* pkt){
auto eh = rte_pktmbuf_mtod(pkt, struct ether_hdr*);

}

static inline void set_ipv4(struct rte_mbuf* pkt, uint8_t *saddr, uint8_t *daddr){
auto ipv4 = rte_pktmbuf_mtod_offset(pkt, struct ipv4_hdr*, sizeof(struct ether_hdr*));

}

static inline void set_ipv6(struct rte_mbuf* pkt, uint16_t *saddr, uint16_t *daddr){
auto ipv6 = rte_pktmbuf_mtod_offset(pkt, struct ipv6_hdr*, sizeof(struct ether_hdr*));

}

static inline void set_udp(struct rte_mbuf* pkt, uint16_t sport, uint16_t dport){
auto udp = rte_pktmbuf_mtod_offset(pkt, struct udp_hdr*, sizeof(struct ether_hdr*) sizeof(struct ipv4_hdr*));
}

static inline void set_tcp(struct rte_mbuf* pkt, uint16_t sport, uint16_t dport){
auto tcp = rte_pktmbuf_mtod_offset(pkt, struct tcp_hdr*, sizeof(struct ether_hdr*) sizeof(struct ipv4_hdr*));
}

static inline void set_packet_general(struct rte_mbuf* pkt,)
*/

static inline void set_packet_temp(struct rte_mbuf* pkt, uint8_t num){

    auto packet = rte_pktmbuf_mtod(pkt,struct ether_hdr*);

    switch (num){
        case 0:
            memcpy(packet, __icmp_ipv4_packet, sizeof(__icmp_ipv4_packet));
            pkt->pkt_len = pkt->data_len = sizeof(__icmp_ipv4_packet);
            pkt->packet_type = (RTE_PTYPE_L2_ETHER | RTE_PTYPE_L3_IPV4 | RTE_PTYPE_L4_ICMP);
            break;
        case 1:
            memcpy(packet, __icmp6_ipv6_packet, sizeof(__icmp6_ipv6_packet));
            pkt->pkt_len = pkt->data_len = sizeof(__icmp6_ipv6_packet);
            pkt->packet_type = (RTE_PTYPE_L2_ETHER | RTE_PTYPE_L3_IPV6 | RTE_PTYPE_L4_ICMP);
            break;
        case 2:
            memcpy(packet, __arp_packet, sizeof(__arp_packet));
            pkt->pkt_len = pkt->data_len = sizeof(__arp_packet);
            pkt->packet_type = (RTE_PTYPE_L2_ETHER_ARP);
            break;
        case 4:
            memcpy(packet, __tcp_ipv4_packet,sizeof(__tcp_ipv4_packet));
            pkt->pkt_len = pkt->data_len = sizeof(__tcp_ipv4_packet);
            pkt->packet_type = (RTE_PTYPE_L2_ETHER | RTE_PTYPE_L3_IPV4 | RTE_PTYPE_L4_TCP);
            break;
        case 5:
            memcpy(packet, __bfd_udp_ipv4_packet,sizeof(__bfd_udp_ipv4_packet));
            pkt->pkt_len = pkt->data_len = sizeof(__bfd_udp_ipv4_packet);
            pkt->packet_type = (RTE_PTYPE_L2_ETHER | RTE_PTYPE_L3_IPV4 | RTE_PTYPE_L4_UDP );
            break;
        case 6:
            memcpy(packet, __tcp_ipv6_packet,sizeof(__tcp_ipv6_packet));
            pkt->pkt_len = pkt->data_len = sizeof(__tcp_ipv6_packet);
            pkt->packet_type = (RTE_PTYPE_L2_ETHER | RTE_PTYPE_L3_IPV6 | RTE_PTYPE_L4_TCP);
            break;
        case 7:
            memcpy(packet, __bgp_tcp_ipv4_packet,sizeof(__bgp_tcp_ipv4_packet));
            pkt->pkt_len = pkt->data_len = sizeof(__bgp_tcp_ipv4_packet);
            pkt->packet_type = (RTE_PTYPE_L2_ETHER | RTE_PTYPE_L3_IPV4 | RTE_PTYPE_L4_TCP);
            break;
        case 8:
            memcpy(packet, __ospf_ipv4_packet,sizeof(__ospf_ipv4_packet));
            pkt->pkt_len = pkt->data_len = sizeof(__ospf_ipv4_packet);
            pkt->packet_type = (RTE_PTYPE_L2_ETHER | RTE_PTYPE_L3_IPV4);
            break;
        case 10:
            memcpy(packet, __icmp_ipv4_vlan_packet,sizeof(__icmp_ipv4_vlan_packet));
            pkt->pkt_len = pkt->data_len = sizeof(__icmp_ipv4_vlan_packet);
            pkt->packet_type = (RTE_PTYPE_L2_ETHER | RTE_PTYPE_L3_IPV4);
            break;
        case 12:
            memcpy(packet, __icmp_ipv4_gtpu_udp_ipv4_packet,sizeof(__icmp_ipv4_gtpu_udp_ipv4_packet));
            pkt->pkt_len = pkt->data_len = sizeof(__icmp_ipv4_gtpu_udp_ipv4_packet);
            pkt->packet_type = (RTE_PTYPE_L2_ETHER | RTE_PTYPE_L3_IPV4 | RTE_PTYPE_L4_UDP);
            break;
        case 14:
            memcpy(packet, __icmp_ipv4_gre_ipv4_packet,sizeof(__icmp_ipv4_gre_ipv4_packet));
            pkt->pkt_len = pkt->data_len = sizeof(__icmp_ipv4_gre_ipv4_packet);
            pkt->packet_type = (RTE_PTYPE_L2_ETHER | RTE_PTYPE_L3_IPV4);
            break;
        case 18:
            memcpy(packet, __icmp_ipv4_gre_ipoption_ipv4_packet,sizeof(__icmp_ipv4_gre_ipoption_ipv4_packet));
            pkt->pkt_len = pkt->data_len = sizeof(__icmp_ipv4_gre_ipoption_ipv4_packet);
            pkt->packet_type = (RTE_PTYPE_L2_ETHER | RTE_PTYPE_L3_IPV4);
        case 20:
            memcpy(packet, __user_icmp_ipv4_packet, sizeof(__user_icmp_ipv4_packet));
            pkt->pkt_len = pkt->data_len = sizeof(__user_icmp_ipv4_packet);
            pkt->packet_type = (RTE_PTYPE_L2_ETHER | RTE_PTYPE_L3_IPV4 | RTE_PTYPE_L4_ICMP);
            break;
        case PTEMP_6RD_IPV6_IPv4:
            memcpy(packet, __6rd_ipv6_ipv4_packet, sizeof(__6rd_ipv6_ipv4_packet));
            pkt->pkt_len = pkt->data_len = sizeof(__6rd_ipv6_ipv4_packet);
            pkt->packet_type = (RTE_PTYPE_L2_ETHER | RTE_PTYPE_L3_IPV4);
            break;
    }
    
    pkt->nb_segs = 1;
    pkt->next = NULL;
}
